Family Base {
  Family Inner {
    type Exp = EBase{}
    def ev: Exp -> N =
      case EBase{} = 0
  }
  Family ExtInner extends self(Base).Inner {
    type Exp += EExt{e: Exp}
    def ev: Exp -> N +=
      case EExt{e: Exp} = ev(e) + 1

    def cst: Exp -> N =
      case EBase{} = 0;
      case EExt{e: Exp} = cst(e)
  }
}

Family Ext extends Base {
}