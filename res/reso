Family Base {
  Family Inner {
    type Exp = EBase{}
    type OptionExp = None{} | Some{x: Exp}
    def inner: Exp -> OptionExp =
      case EBase{} = self(self(Base).Inner).OptionExp(None{})
  }
  Family ExtInner extends self(Base).Inner {
    type Exp += EExt{e: Exp}
    def inner: Exp -> OptionExp +=
      case EExt{e: Exp} = self(self(Base).ExtInner).OptionExp(Some{x = e})
  }
}

Family Ext extends Base {
}