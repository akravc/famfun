Family STLCBase {
  type Ty = TUnit{} | TNat{} | TArr{t1: Ty, t2: Ty}
  type Val = U{} | Var{x: String} | Lam{x: String, e: Exp}
  type Exp = EVal{v: Val} | EApp{e1: Exp, e2: Exp}

  type OptionVal = None{} | Some{v: Val}
  def bind(f: Val -> self(STLCBase).OptionVal): self(STLCBase).OptionVal -> self(STLCBase).OptionVal =
    case None{} = self(STLCBase).OptionVal(None{});
    case Some{v: Val} = f(v)

  def eval: Exp -> self(STLCBase).OptionVal =
    case EVal{v: Val} = self(STLCBase).OptionVal(Some{v = v});
    case EApp{e1: Exp, e2: Exp} = bind(lam(v: Val).apply(e2,v), eval(e1))

  def apply(e2: Exp): Val -> self(STLCBase).OptionVal =
    case Lam{x: String, e: Exp} = eval (subst(x, e2, e));
    case _ = self(STLCBase).OptionVal(None{})

  def subst(x: String, e0: Exp): Exp -> Exp =
    case EVal{v: Val} = substVal(x, e0, v);
    case EApp{e1: Exp, e2: Exp} = Exp(EApp{e1 = subst(x, e0, e1), e2 = subst(x, e0, e2)})

  def substVal(y: String, e0: Exp): Val -> Exp =
    case U{} = Exp(EVal{v = Val(U{})});
    case Var{x: String} = if x==y then e0 else Exp(EVal{v = Val(Var{x = x})});
    case Lam{x: String, e: Exp} = Exp(EVal{v = if x==y then Val(Lam{x = x, e = e}) else Val(Lam{x = x, e = subst(y, e0, e)})})

  def branch(e1: Exp, e2: Exp): Val -> self(STLCBase).OptionVal =
    case _ = self(STLCBase).OptionVal(None{})
}

Family STLCIf extends STLCBase {
  type Ty += TBool{}
  type Val += True{} | False{}
  type Exp += EIf{e: Exp, e1: Exp, e2: Exp}

  def eval: Exp -> self(STLCIf).OptionVal +=
    case EIf{e: Exp, e1: Exp, e2: Exp} =
      bind(branch(e1, e2), eval(e))

  def branch(e1: Exp, e2: Exp): Val -> self(STLCIf).OptionVal +=
    case True{} = eval e1;
    case False{} = eval e2;
    case _ = self(STLCIf).OptionVal(None{})

  def apply(e2: Exp): Val -> self(STLCIf).OptionVal +=
    case _ = self(STLCIf).OptionVal(None{})

  def subst(x: String, e0: Exp): Exp -> Exp +=
    case EIf{e: Exp, e1: Exp, e2: Exp} = Exp(EIf{e = subst(x, e0, e), e1 = subst(x, e0, e1), e2 = subst(x, e0, e1)})

  def substVal(y: String, e0: Exp): Val -> Exp +=
    case True{} = Exp(EVal{v = Val(True{})});
    case False{} = Exp(EVal{v = Val(False{})})
}

Family BaseComp {
  type ListString = NilString{} | ConsString{head: String, tail: ListString}

  Family STLC extends STLCBase {}

  Family IL {
    type Ty = TUnit{} | TCont{ts: ListTy}
    type Val = U{} | Var{x: String}
    type Exp = ELet{x: String, v: Val, e: Exp} | EApp{v: Val, vs: ListVal} | EHalt{v: Val}
    type Fun = MkFun{n: String, xs: self(BaseComp).ListString, e: Exp}

    type ListTy = NilTy{} | ConsTy{head: Ty, tail: ListTy}
    type ListVal = NilVal{} | ConsVal{head: Val, tail: ListVal}
    type ListFun = NilFun{} | ConsFun{head: Fun, tail: ListFun}

    type OptionVal = None{} | Some{v: Val}
    def bind(f: Val -> self(self(BaseComp).IL).OptionVal): self(self(BaseComp).IL).OptionVal -> self(self(BaseComp).IL).OptionVal =
      case None{} = self(self(BaseComp).IL).OptionVal(None{});
      case Some{v: Val} = f(v)

    def map(f: Val -> Val): ListVal -> ListVal =
      case NilVal{} = ListVal(NilVal{});
      case ConsVal{head: Val, tail: ListVal} = ListVal(ConsVal{head = f(head), tail = map(f, tail)})

    def eval(fs: ListFun): Exp -> self(self(BaseComp).IL).OptionVal =
      case ELet{x: String, v: Val, e: Exp} = eval(fs, subst(x, v, e));
      case EApp{v: Val, vs: ListVal} = apply(fs, vs, v);//bind(apply(fs, vs), eval(fs, v));
      case EHalt{v: Val} = self(self(BaseComp).IL).OptionVal(Some{v = v})

    def apply(fs: ListFun, vs: ListVal): Val -> self(self(BaseComp).IL).OptionVal =
      case _ = self(self(BaseComp).IL).OptionVal(None{})

    def subst(y: String, v0: Val): Exp -> Exp =
      case ELet{x: String, v: Val, e: Exp} =
        if x==y then Exp(ELet{x=x, v=substVal(y, v0, v), e=e}) else Exp(ELet{x=x, v=substVal(y, v0, v), e=subst(y, v0, e)});
      case EApp{v: Val, vs: ListVal} = Exp(EApp{v = substVal(y, v0, v), vs = map(substVal(y, v0), vs)});
      case EHalt{v: Val} = Exp(EHalt{v = substVal(y, v0, v)})

    def substVal(y: String, v0: Val): Val -> Val =
      case U{} = Val(U{});
      case Var{x: String} = if x==y then v0 else Val(Var{x = x})
  }
}